{
  "version": 3,
  "sources": ["../src/codecs/aes.ts", "../src/codecs/index.ts"],
  "sourcesContent": ["/* eslint-disable */\r\n\r\nvar Nr = 14;\r\nvar Nk = 8;\r\nvar Decrypt = false;\r\nfunction enc_utf8(s) {\r\n  try {\r\n    return unescape(encodeURIComponent(s));\r\n  } catch (e) {\r\n    throw \"Error on UTF-8 encode\";\r\n  }\r\n};\r\nfunction dec_utf8(s) {\r\n  try {\r\n    return decodeURIComponent(escape(s));\r\n  } catch (e) {\r\n    throw \"Bad Key\";\r\n  }\r\n};\r\nfunction padBlock(byteArr) {\r\n  var array = [],\r\n    cpad,\r\n    i;\r\n  if (byteArr.length < 16) {\r\n    cpad = 16 - byteArr.length;\r\n    array = [\r\n      cpad,\r\n      cpad,\r\n      cpad,\r\n      cpad,\r\n      cpad,\r\n      cpad,\r\n      cpad,\r\n      cpad,\r\n      cpad,\r\n      cpad,\r\n      cpad,\r\n      cpad,\r\n      cpad,\r\n      cpad,\r\n      cpad,\r\n      cpad,\r\n    ];\r\n  }\r\n  for (i = 0; i < byteArr.length; i++) {\r\n    array[i] = byteArr[i];\r\n  }\r\n  return array;\r\n};\r\nfunction block2s(block, lastBlock) {\r\n  var string = \"\",\r\n    padding,\r\n    i;\r\n  if (lastBlock) {\r\n    padding = block[15];\r\n    if (padding > 16) {\r\n      throw \"Decryption error: Maybe bad key\";\r\n    }\r\n    if (padding === 16) {\r\n      return \"\";\r\n    }\r\n    for (i = 0; i < 16 - padding; i++) {\r\n      string += String.fromCharCode(block[i]);\r\n    }\r\n  } else {\r\n    for (i = 0; i < 16; i++) {\r\n      string += String.fromCharCode(block[i]);\r\n    }\r\n  }\r\n  return string;\r\n};\r\nfunction a2h(numArr) {\r\n  var string = \"\",\r\n    i;\r\n  for (i = 0; i < numArr.length; i++) {\r\n    string += (numArr[i] < 16 ? \"0\" : \"\") + numArr[i].toString(16);\r\n  }\r\n  return string;\r\n};\r\nfunction h2a(s) {\r\n  var ret = [];\r\n  s.replace(/(..)/g, function (s) {\r\n    ret.push(parseInt(s, 16));\r\n  });\r\n  return ret;\r\n};\r\nfunction s2a(string, binary) {\r\n  var array = [],\r\n    i;\r\n\r\n  if (!binary) {\r\n    string = enc_utf8(string);\r\n  }\r\n\r\n  for (i = 0; i < string.length; i++) {\r\n    array[i] = string.charCodeAt(i);\r\n  }\r\n\r\n  return array;\r\n};\r\nfunction size(newsize) {\r\n  switch (newsize) {\r\n    case 128:\r\n      Nr = 10;\r\n      Nk = 4;\r\n      break;\r\n    case 192:\r\n      Nr = 12;\r\n      Nk = 6;\r\n      break;\r\n    case 256:\r\n      Nr = 14;\r\n      Nk = 8;\r\n      break;\r\n    default:\r\n      throw \"Invalid Key Size Specified:\" + newsize;\r\n  }\r\n};\r\nfunction randArr(num) {\r\n  var result = [],\r\n    i;\r\n  for (i = 0; i < num; i++) {\r\n    result = result.concat(Math.floor(Math.random() * 256));\r\n  }\r\n  return result;\r\n};\r\nfunction openSSLKey(passwordArr, saltArr) {\r\n  var rounds = Nr >= 12 ? 3 : 2,\r\n    key = [],\r\n    iv = [],\r\n    md5_hash = [],\r\n    result = [],\r\n    data00 = passwordArr.concat(saltArr),\r\n    i;\r\n  md5_hash[0] = MD5(data00);\r\n  result = md5_hash[0];\r\n  for (i = 1; i < rounds; i++) {\r\n    md5_hash[i] = MD5(md5_hash[i - 1].concat(data00));\r\n    result = result.concat(md5_hash[i]);\r\n  }\r\n  key = result.slice(0, 4 * Nk);\r\n  iv = result.slice(4 * Nk, 4 * Nk + 16);\r\n  return {\r\n    key: key,\r\n    iv: iv,\r\n  };\r\n};\r\nfunction rawEncrypt(plaintext, key, iv) {\r\n  key = expandKey(key);\r\n  var numBlocks = Math.ceil(plaintext.length / 16),\r\n    blocks = [],\r\n    i,\r\n    cipherBlocks = [];\r\n  for (i = 0; i < numBlocks; i++) {\r\n    blocks[i] = padBlock(plaintext.slice(i * 16, i * 16 + 16));\r\n  }\r\n  if (plaintext.length % 16 === 0) {\r\n    blocks.push([\r\n      16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,\r\n    ]);\r\n    numBlocks++;\r\n  }\r\n  for (i = 0; i < blocks.length; i++) {\r\n    blocks[i] =\r\n      i === 0\r\n        ? xorBlocks(blocks[i], iv)\r\n        : xorBlocks(blocks[i], cipherBlocks[i - 1]);\r\n    cipherBlocks[i] = encryptBlock(blocks[i], key);\r\n  }\r\n  return cipherBlocks;\r\n};\r\nfunction rawDecrypt(cryptArr, key, iv, binary) {\r\n  key = expandKey(key);\r\n  var numBlocks = cryptArr.length / 16,\r\n    cipherBlocks = [],\r\n    i,\r\n    plainBlocks = [],\r\n    string = \"\";\r\n  for (i = 0; i < numBlocks; i++) {\r\n    cipherBlocks.push(cryptArr.slice(i * 16, (i + 1) * 16));\r\n  }\r\n  for (i = cipherBlocks.length - 1; i >= 0; i--) {\r\n    plainBlocks[i] = decryptBlock(cipherBlocks[i], key);\r\n    plainBlocks[i] =\r\n      i === 0\r\n        ? xorBlocks(plainBlocks[i], iv)\r\n        : xorBlocks(plainBlocks[i], cipherBlocks[i - 1]);\r\n  }\r\n  for (i = 0; i < numBlocks - 1; i++) {\r\n    string += block2s(plainBlocks[i], false);\r\n  }\r\n  string += block2s(plainBlocks[i], true);\r\n  return binary ? string : dec_utf8(string);\r\n};\r\nfunction encryptBlock(block, words) {\r\n  Decrypt = false;\r\n  var state = addRoundKey(block, words, 0),\r\n    round;\r\n  for (round = 1; round < Nr + 1; round++) {\r\n    state = subBytes(state);\r\n    state = shiftRows(state);\r\n    if (round < Nr) {\r\n      state = mixColumns(state);\r\n    }\r\n    state = addRoundKey(state, words, round);\r\n  }\r\n\r\n  return state;\r\n};\r\nfunction decryptBlock(block, words) {\r\n  Decrypt = true;\r\n  var state = addRoundKey(block, words, Nr),\r\n    round;\r\n  for (round = Nr - 1; round > -1; round--) {\r\n    state = shiftRows(state);\r\n    state = subBytes(state);\r\n    state = addRoundKey(state, words, round);\r\n    if (round > 0) {\r\n      state = mixColumns(state);\r\n    }\r\n  }\r\n\r\n  return state;\r\n};\r\nfunction subBytes(state) {\r\n  var S = Decrypt ? SBoxInv : SBox,\r\n    temp = [],\r\n    i;\r\n  for (i = 0; i < 16; i++) {\r\n    temp[i] = S[state[i]];\r\n  }\r\n  return temp;\r\n};\r\nfunction shiftRows(state) {\r\n  var temp = [],\r\n    shiftBy = Decrypt\r\n      ? [0, 13, 10, 7, 4, 1, 14, 11, 8, 5, 2, 15, 12, 9, 6, 3]\r\n      : [0, 5, 10, 15, 4, 9, 14, 3, 8, 13, 2, 7, 12, 1, 6, 11],\r\n    i;\r\n  for (i = 0; i < 16; i++) {\r\n    temp[i] = state[shiftBy[i]];\r\n  }\r\n  return temp;\r\n};\r\nfunction mixColumns(state) {\r\n  var t = [],\r\n    c;\r\n  if (!Decrypt) {\r\n    for (c = 0; c < 4; c++) {\r\n      t[c * 4] =\r\n        G2X[state[c * 4]] ^\r\n        G3X[state[1 + c * 4]] ^\r\n        state[2 + c * 4] ^\r\n        state[3 + c * 4];\r\n      t[1 + c * 4] =\r\n        state[c * 4] ^\r\n        G2X[state[1 + c * 4]] ^\r\n        G3X[state[2 + c * 4]] ^\r\n        state[3 + c * 4];\r\n      t[2 + c * 4] =\r\n        state[c * 4] ^\r\n        state[1 + c * 4] ^\r\n        G2X[state[2 + c * 4]] ^\r\n        G3X[state[3 + c * 4]];\r\n      t[3 + c * 4] =\r\n        G3X[state[c * 4]] ^\r\n        state[1 + c * 4] ^\r\n        state[2 + c * 4] ^\r\n        G2X[state[3 + c * 4]];\r\n    }\r\n  } else {\r\n    for (c = 0; c < 4; c++) {\r\n      t[c * 4] =\r\n        GEX[state[c * 4]] ^\r\n        GBX[state[1 + c * 4]] ^\r\n        GDX[state[2 + c * 4]] ^\r\n        G9X[state[3 + c * 4]];\r\n      t[1 + c * 4] =\r\n        G9X[state[c * 4]] ^\r\n        GEX[state[1 + c * 4]] ^\r\n        GBX[state[2 + c * 4]] ^\r\n        GDX[state[3 + c * 4]];\r\n      t[2 + c * 4] =\r\n        GDX[state[c * 4]] ^\r\n        G9X[state[1 + c * 4]] ^\r\n        GEX[state[2 + c * 4]] ^\r\n        GBX[state[3 + c * 4]];\r\n      t[3 + c * 4] =\r\n        GBX[state[c * 4]] ^\r\n        GDX[state[1 + c * 4]] ^\r\n        G9X[state[2 + c * 4]] ^\r\n        GEX[state[3 + c * 4]];\r\n    }\r\n  }\r\n\r\n  return t;\r\n};\r\nfunction addRoundKey(state, words, round) {\r\n  var temp = [],\r\n    i;\r\n  for (i = 0; i < 16; i++) {\r\n    temp[i] = state[i] ^ words[round][i];\r\n  }\r\n  return temp;\r\n};\r\nfunction xorBlocks(block1, block2) {\r\n  var temp = [],\r\n    i;\r\n  for (i = 0; i < 16; i++) {\r\n    temp[i] = block1[i] ^ block2[i];\r\n  }\r\n  return temp;\r\n};\r\nfunction expandKey(key) {\r\n  var w = [],\r\n    temp = [],\r\n    i,\r\n    r,\r\n    t,\r\n    flat = [],\r\n    j;\r\n\r\n  for (i = 0; i < Nk; i++) {\r\n    r = [key[4 * i], key[4 * i + 1], key[4 * i + 2], key[4 * i + 3]];\r\n    w[i] = r;\r\n  }\r\n\r\n  for (i = Nk; i < 4 * (Nr + 1); i++) {\r\n    w[i] = [];\r\n    for (t = 0; t < 4; t++) {\r\n      temp[t] = w[i - 1][t];\r\n    }\r\n    if (i % Nk === 0) {\r\n      temp = subWord(rotWord(temp));\r\n      temp[0] ^= Rcon[i / Nk - 1];\r\n    } else if (Nk > 6 && i % Nk === 4) {\r\n      temp = subWord(temp);\r\n    }\r\n    for (t = 0; t < 4; t++) {\r\n      w[i][t] = w[i - Nk][t] ^ temp[t];\r\n    }\r\n  }\r\n  for (i = 0; i < Nr + 1; i++) {\r\n    flat[i] = [];\r\n    for (j = 0; j < 4; j++) {\r\n      flat[i].push(\r\n        w[i * 4 + j][0],\r\n        w[i * 4 + j][1],\r\n        w[i * 4 + j][2],\r\n        w[i * 4 + j][3]\r\n      );\r\n    }\r\n  }\r\n  return flat;\r\n};\r\nfunction subWord(w) {\r\n  for (var i = 0; i < 4; i++) {\r\n    w[i] = SBox[w[i]];\r\n  }\r\n  return w;\r\n};\r\nfunction rotWord(w) {\r\n  var tmp = w[0],\r\n    i;\r\n  for (i = 0; i < 3; i++) {\r\n    w[i] = w[i + 1];\r\n  }\r\n  w[3] = tmp;\r\n  return w;\r\n};\r\nfunction strhex(str, size) {\r\n  var i,\r\n    ret = [];\r\n  for (i = 0; i < str.length; i += size) {\r\n    ret[i / size] = parseInt(str.substr(i, size), 16);\r\n  }\r\n  return ret;\r\n};\r\nfunction invertArr(arr) {\r\n  var i,\r\n    ret = [];\r\n  for (i = 0; i < arr.length; i++) {\r\n    ret[arr[i]] = i;\r\n  }\r\n  return ret;\r\n};\r\nfunction Gxx(a, b) {\r\n  var i, ret;\r\n\r\n  ret = 0;\r\n  for (i = 0; i < 8; i++) {\r\n    ret = (b & 1) === 1 ? ret ^ a : ret;\r\n    a = a > 0x7f ? 0x11b ^ (a << 1) : a << 1;\r\n    b >>>= 1;\r\n  }\r\n\r\n  return ret;\r\n};\r\nfunction Gx(x) {\r\n  var i,\r\n    r = [];\r\n  for (i = 0; i < 256; i++) {\r\n    r[i] = Gxx(x, i);\r\n  }\r\n  return r;\r\n};\r\nvar SBox = strhex(\r\n  \"637c777bf26b6fc53001672bfed7ab76ca82c97dfa5947f0add4a2af9ca472c0b7fd9326363ff7cc34a5e5f171d8311504c723c31896059a071280e2eb27b27509832c1a1b6e5aa0523bd6b329e32f8453d100ed20fcb15b6acbbe394a4c58cfd0efaafb434d338545f9027f503c9fa851a3408f929d38f5bcb6da2110fff3d2cd0c13ec5f974417c4a77e3d645d197360814fdc222a908846eeb814de5e0bdbe0323a0a4906245cc2d3ac629195e479e7c8376d8dd54ea96c56f4ea657aae08ba78252e1ca6b4c6e8dd741f4bbd8b8a703eb5664803f60e613557b986c11d9ee1f8981169d98e949b1e87e9ce5528df8ca1890dbfe6426841992d0fb054bb16\",\r\n  2\r\n);\r\nvar SBoxInv = invertArr(SBox);\r\nvar Rcon = strhex(\r\n  \"01020408102040801b366cd8ab4d9a2f5ebc63c697356ad4b37dfaefc591\",\r\n  2\r\n);\r\nvar G2X = Gx(2);\r\nvar G3X = Gx(3);\r\nvar G9X = Gx(9);\r\nvar GBX = Gx(0xb);\r\nvar GDX = Gx(0xd);\r\nvar GEX = Gx(0xe);\r\nfunction enc(string, pass, binary) {\r\n  var salt = randArr(8),\r\n    pbe = openSSLKey(s2a(pass, binary), salt),\r\n    key = pbe.key,\r\n    iv = pbe.iv,\r\n    cipherBlocks,\r\n    saltBlock = [[83, 97, 108, 116, 101, 100, 95, 95].concat(salt)];\r\n  string = s2a(string, binary);\r\n  cipherBlocks = rawEncrypt(string, key, iv);\r\n\r\n  cipherBlocks = saltBlock.concat(cipherBlocks);\r\n  return Base64.encode(cipherBlocks);\r\n};\r\nfunction dec(string, pass, binary) {\r\n  var cryptArr = Base64.decode(string),\r\n    salt = cryptArr.slice(8, 16),\r\n    pbe = openSSLKey(s2a(pass, binary), salt),\r\n    key = pbe.key,\r\n    iv = pbe.iv;\r\n  cryptArr = cryptArr.slice(16, cryptArr.length);\r\n\r\n  string = rawDecrypt(cryptArr, key, iv, binary);\r\n  return string;\r\n};\r\nfunction MD5(numArr) {\r\n  function rotateLeft(lValue, iShiftBits) {\r\n    return (lValue << iShiftBits) | (lValue >>> (32 - iShiftBits));\r\n  }\r\n\r\n  function addUnsigned(lX, lY) {\r\n    var lX4, lY4, lX8, lY8, lResult;\r\n    lX8 = lX & 0x80000000;\r\n    lY8 = lY & 0x80000000;\r\n    lX4 = lX & 0x40000000;\r\n    lY4 = lY & 0x40000000;\r\n    lResult = (lX & 0x3fffffff) + (lY & 0x3fffffff);\r\n    if (lX4 & lY4) {\r\n      return lResult ^ 0x80000000 ^ lX8 ^ lY8;\r\n    }\r\n    if (lX4 | lY4) {\r\n      if (lResult & 0x40000000) {\r\n        return lResult ^ 0xc0000000 ^ lX8 ^ lY8;\r\n      } else {\r\n        return lResult ^ 0x40000000 ^ lX8 ^ lY8;\r\n      }\r\n    } else {\r\n      return lResult ^ lX8 ^ lY8;\r\n    }\r\n  }\r\n\r\n  function f(x, y, z) {\r\n    return (x & y) | (~x & z);\r\n  }\r\n  function g(x, y, z) {\r\n    return (x & z) | (y & ~z);\r\n  }\r\n  function h(x, y, z) {\r\n    return x ^ y ^ z;\r\n  }\r\n  function funcI(x, y, z) {\r\n    return y ^ (x | ~z);\r\n  }\r\n\r\n  function ff(a, b, c, d, x, s, ac) {\r\n    a = addUnsigned(a, addUnsigned(addUnsigned(f(b, c, d), x), ac));\r\n    return addUnsigned(rotateLeft(a, s), b);\r\n  }\r\n\r\n  function gg(a, b, c, d, x, s, ac) {\r\n    a = addUnsigned(a, addUnsigned(addUnsigned(g(b, c, d), x), ac));\r\n    return addUnsigned(rotateLeft(a, s), b);\r\n  }\r\n\r\n  function hh(a, b, c, d, x, s, ac) {\r\n    a = addUnsigned(a, addUnsigned(addUnsigned(h(b, c, d), x), ac));\r\n    return addUnsigned(rotateLeft(a, s), b);\r\n  }\r\n\r\n  function ii(a, b, c, d, x, s, ac) {\r\n    a = addUnsigned(a, addUnsigned(addUnsigned(funcI(b, c, d), x), ac));\r\n    return addUnsigned(rotateLeft(a, s), b);\r\n  }\r\n\r\n  function convertToWordArray(numArr) {\r\n    var lWordCount,\r\n      lMessageLength = numArr.length,\r\n      lNumberOfWords_temp1 = lMessageLength + 8,\r\n      lNumberOfWords_temp2 =\r\n        (lNumberOfWords_temp1 - (lNumberOfWords_temp1 % 64)) / 64,\r\n      lNumberOfWords = (lNumberOfWords_temp2 + 1) * 16,\r\n      lWordArray = [],\r\n      lBytePosition = 0,\r\n      lByteCount = 0;\r\n    while (lByteCount < lMessageLength) {\r\n      lWordCount = (lByteCount - (lByteCount % 4)) / 4;\r\n      lBytePosition = (lByteCount % 4) * 8;\r\n      lWordArray[lWordCount] =\r\n        lWordArray[lWordCount] | (numArr[lByteCount] << lBytePosition);\r\n      lByteCount++;\r\n    }\r\n    lWordCount = (lByteCount - (lByteCount % 4)) / 4;\r\n    lBytePosition = (lByteCount % 4) * 8;\r\n    lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80 << lBytePosition);\r\n    lWordArray[lNumberOfWords - 2] = lMessageLength << 3;\r\n    lWordArray[lNumberOfWords - 1] = lMessageLength >>> 29;\r\n    return lWordArray;\r\n  }\r\n\r\n  function wordToHex(lValue) {\r\n    var lByte,\r\n      lCount,\r\n      wordToHexArr = [];\r\n    for (lCount = 0; lCount <= 3; lCount++) {\r\n      lByte = (lValue >>> (lCount * 8)) & 255;\r\n      wordToHexArr = wordToHexArr.concat(lByte);\r\n    }\r\n    return wordToHexArr;\r\n  }\r\n\r\n  var x = [],\r\n    k,\r\n    AA,\r\n    BB,\r\n    CC,\r\n    DD,\r\n    a,\r\n    b,\r\n    c,\r\n    d,\r\n    rnd = strhex(\r\n      \"67452301efcdab8998badcfe10325476d76aa478e8c7b756242070dbc1bdceeef57c0faf4787c62aa8304613fd469501698098d88b44f7afffff5bb1895cd7be6b901122fd987193a679438e49b40821f61e2562c040b340265e5a51e9b6c7aad62f105d02441453d8a1e681e7d3fbc821e1cde6c33707d6f4d50d87455a14eda9e3e905fcefa3f8676f02d98d2a4c8afffa39428771f6816d9d6122fde5380ca4beea444bdecfa9f6bb4b60bebfbc70289b7ec6eaa127fad4ef308504881d05d9d4d039e6db99e51fa27cf8c4ac5665f4292244432aff97ab9423a7fc93a039655b59c38f0ccc92ffeff47d85845dd16fa87e4ffe2ce6e0a30143144e0811a1f7537e82bd3af2352ad7d2bbeb86d391\",\r\n      8\r\n    );\r\n\r\n  x = convertToWordArray(numArr);\r\n\r\n  a = rnd[0];\r\n  b = rnd[1];\r\n  c = rnd[2];\r\n  d = rnd[3];\r\n\r\n  for (k = 0; k < x.length; k += 16) {\r\n    AA = a;\r\n    BB = b;\r\n    CC = c;\r\n    DD = d;\r\n    a = ff(a, b, c, d, x[k + 0], 7, rnd[4]);\r\n    d = ff(d, a, b, c, x[k + 1], 12, rnd[5]);\r\n    c = ff(c, d, a, b, x[k + 2], 17, rnd[6]);\r\n    b = ff(b, c, d, a, x[k + 3], 22, rnd[7]);\r\n    a = ff(a, b, c, d, x[k + 4], 7, rnd[8]);\r\n    d = ff(d, a, b, c, x[k + 5], 12, rnd[9]);\r\n    c = ff(c, d, a, b, x[k + 6], 17, rnd[10]);\r\n    b = ff(b, c, d, a, x[k + 7], 22, rnd[11]);\r\n    a = ff(a, b, c, d, x[k + 8], 7, rnd[12]);\r\n    d = ff(d, a, b, c, x[k + 9], 12, rnd[13]);\r\n    c = ff(c, d, a, b, x[k + 10], 17, rnd[14]);\r\n    b = ff(b, c, d, a, x[k + 11], 22, rnd[15]);\r\n    a = ff(a, b, c, d, x[k + 12], 7, rnd[16]);\r\n    d = ff(d, a, b, c, x[k + 13], 12, rnd[17]);\r\n    c = ff(c, d, a, b, x[k + 14], 17, rnd[18]);\r\n    b = ff(b, c, d, a, x[k + 15], 22, rnd[19]);\r\n    a = gg(a, b, c, d, x[k + 1], 5, rnd[20]);\r\n    d = gg(d, a, b, c, x[k + 6], 9, rnd[21]);\r\n    c = gg(c, d, a, b, x[k + 11], 14, rnd[22]);\r\n    b = gg(b, c, d, a, x[k + 0], 20, rnd[23]);\r\n    a = gg(a, b, c, d, x[k + 5], 5, rnd[24]);\r\n    d = gg(d, a, b, c, x[k + 10], 9, rnd[25]);\r\n    c = gg(c, d, a, b, x[k + 15], 14, rnd[26]);\r\n    b = gg(b, c, d, a, x[k + 4], 20, rnd[27]);\r\n    a = gg(a, b, c, d, x[k + 9], 5, rnd[28]);\r\n    d = gg(d, a, b, c, x[k + 14], 9, rnd[29]);\r\n    c = gg(c, d, a, b, x[k + 3], 14, rnd[30]);\r\n    b = gg(b, c, d, a, x[k + 8], 20, rnd[31]);\r\n    a = gg(a, b, c, d, x[k + 13], 5, rnd[32]);\r\n    d = gg(d, a, b, c, x[k + 2], 9, rnd[33]);\r\n    c = gg(c, d, a, b, x[k + 7], 14, rnd[34]);\r\n    b = gg(b, c, d, a, x[k + 12], 20, rnd[35]);\r\n    a = hh(a, b, c, d, x[k + 5], 4, rnd[36]);\r\n    d = hh(d, a, b, c, x[k + 8], 11, rnd[37]);\r\n    c = hh(c, d, a, b, x[k + 11], 16, rnd[38]);\r\n    b = hh(b, c, d, a, x[k + 14], 23, rnd[39]);\r\n    a = hh(a, b, c, d, x[k + 1], 4, rnd[40]);\r\n    d = hh(d, a, b, c, x[k + 4], 11, rnd[41]);\r\n    c = hh(c, d, a, b, x[k + 7], 16, rnd[42]);\r\n    b = hh(b, c, d, a, x[k + 10], 23, rnd[43]);\r\n    a = hh(a, b, c, d, x[k + 13], 4, rnd[44]);\r\n    d = hh(d, a, b, c, x[k + 0], 11, rnd[45]);\r\n    c = hh(c, d, a, b, x[k + 3], 16, rnd[46]);\r\n    b = hh(b, c, d, a, x[k + 6], 23, rnd[47]);\r\n    a = hh(a, b, c, d, x[k + 9], 4, rnd[48]);\r\n    d = hh(d, a, b, c, x[k + 12], 11, rnd[49]);\r\n    c = hh(c, d, a, b, x[k + 15], 16, rnd[50]);\r\n    b = hh(b, c, d, a, x[k + 2], 23, rnd[51]);\r\n    a = ii(a, b, c, d, x[k + 0], 6, rnd[52]);\r\n    d = ii(d, a, b, c, x[k + 7], 10, rnd[53]);\r\n    c = ii(c, d, a, b, x[k + 14], 15, rnd[54]);\r\n    b = ii(b, c, d, a, x[k + 5], 21, rnd[55]);\r\n    a = ii(a, b, c, d, x[k + 12], 6, rnd[56]);\r\n    d = ii(d, a, b, c, x[k + 3], 10, rnd[57]);\r\n    c = ii(c, d, a, b, x[k + 10], 15, rnd[58]);\r\n    b = ii(b, c, d, a, x[k + 1], 21, rnd[59]);\r\n    a = ii(a, b, c, d, x[k + 8], 6, rnd[60]);\r\n    d = ii(d, a, b, c, x[k + 15], 10, rnd[61]);\r\n    c = ii(c, d, a, b, x[k + 6], 15, rnd[62]);\r\n    b = ii(b, c, d, a, x[k + 13], 21, rnd[63]);\r\n    a = ii(a, b, c, d, x[k + 4], 6, rnd[64]);\r\n    d = ii(d, a, b, c, x[k + 11], 10, rnd[65]);\r\n    c = ii(c, d, a, b, x[k + 2], 15, rnd[66]);\r\n    b = ii(b, c, d, a, x[k + 9], 21, rnd[67]);\r\n    a = addUnsigned(a, AA);\r\n    b = addUnsigned(b, BB);\r\n    c = addUnsigned(c, CC);\r\n    d = addUnsigned(d, DD);\r\n  }\r\n\r\n  return wordToHex(a).concat(wordToHex(b), wordToHex(c), wordToHex(d));\r\n};\r\n// function encString (plaintext, key, iv) {\r\n//   var i;\r\n//   plaintext = s2a(plaintext, false);\r\n\r\n//   key = s2a(key, false);\r\n//   for (i = key.length; i < 32; i++) {\r\n//     key[i] = 0;\r\n//   }\r\n\r\n//   if (iv === undefined) {\r\n//   } else {\r\n//     iv = s2a(iv, false);\r\n//     for (i = iv.length; i < 16; i++) {\r\n//       iv[i] = 0;\r\n//     }\r\n//   }\r\n\r\n//   var ct = rawEncrypt(plaintext, key, iv);\r\n//   var ret = [iv];\r\n//   for (i = 0; i < ct.length; i++) {\r\n//     ret[ret.length] = ct[i];\r\n//   }\r\n//   return Base64.encode(ret);\r\n// };\r\n// function decString (ciphertext, key) {\r\n//   // var tmp = Base64.decode(ciphertext);\r\n//   var tmp = atob(ciphertext);\r\n//   var iv = tmp.slice(0, 16);\r\n//   var ct = tmp.slice(16, tmp.length);\r\n//   var i;\r\n\r\n//   key = s2a(key, false);\r\n//   for (i = key.length; i < 32; i++) {\r\n//     key[i] = 0;\r\n//   }\r\n\r\n//   var pt = rawDecrypt(ct, key, iv, false);\r\n//   return pt;\r\n// };\r\n// function Base64() {\r\n//   var _chars =\r\n//     \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",\r\n//     chars = _chars.split(\"\"),\r\n//     encode = function (b, withBreaks) {\r\n//       var flatArr = [],\r\n//         b64 = \"\",\r\n//         i,\r\n//         broken_b64,\r\n//         totalChunks = Math.floor((b.length * 16) / 3);\r\n//       for (i = 0; i < b.length * 16; i++) {\r\n//         flatArr.push(b[Math.floor(i / 16)][i % 16]);\r\n//       }\r\n//       for (i = 0; i < flatArr.length; i = i + 3) {\r\n//         b64 += chars[flatArr[i] >> 2];\r\n//         b64 += chars[((flatArr[i] & 3) << 4) | (flatArr[i + 1] >> 4)];\r\n//         if (flatArr[i + 1] !== undefined) {\r\n//           b64 += chars[((flatArr[i + 1] & 15) << 2) | (flatArr[i + 2] >> 6)];\r\n//         } else {\r\n//           b64 += \"=\";\r\n//         }\r\n//         if (flatArr[i + 2] !== undefined) {\r\n//           b64 += chars[flatArr[i + 2] & 63];\r\n//         } else {\r\n//           b64 += \"=\";\r\n//         }\r\n//       }\r\n//       broken_b64 = b64.slice(0, 64) + \"\\n\";\r\n//       for (i = 1; i < Math.ceil(b64.length / 64); i++) {\r\n//         broken_b64 +=\r\n//           b64.slice(i * 64, i * 64 + 64) +\r\n//           (Math.ceil(b64.length / 64) === i + 1 ? \"\" : \"\\n\");\r\n//       }\r\n//       return broken_b64;\r\n//     },\r\n//     decode = function (string) {\r\n//       string = string.replace(/\\n/g, \"\");\r\n//       var flatArr = [],\r\n//         c = [],\r\n//         b = [],\r\n//         i;\r\n//       for (i = 0; i < string.length; i = i + 4) {\r\n//         c[0] = _chars.indexOf(string.charAt(i));\r\n//         c[1] = _chars.indexOf(string.charAt(i + 1));\r\n//         c[2] = _chars.indexOf(string.charAt(i + 2));\r\n//         c[3] = _chars.indexOf(string.charAt(i + 3));\r\n\r\n//         b[0] = (c[0] << 2) | (c[1] >> 4);\r\n//         b[1] = ((c[1] & 15) << 4) | (c[2] >> 2);\r\n//         b[2] = ((c[2] & 3) << 6) | c[3];\r\n//         flatArr.push(b[0], b[1], b[2]);\r\n//       }\r\n//       flatArr = flatArr.slice(0, flatArr.length - (flatArr.length % 16));\r\n//       return flatArr;\r\n//     };\r\n\r\n//   if (typeof Array.indexOf === \"function\") {\r\n//     _chars = chars;\r\n//   }\r\n\r\n//   return {\r\n//     encode: encode,\r\n//     decode: decode,\r\n//   };\r\n// }\r\n\r\nconst Base64 = {\r\n  encode: function (b) {\r\n    var _chars =\r\n      \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",\r\n      chars = _chars.split(\"\"),\r\n      flatArr = [],\r\n      b64 = \"\",\r\n      i,\r\n      broken_b64,\r\n      totalChunks = Math.floor((b.length * 16) / 3);\r\n    for (i = 0; i < b.length * 16; i++) {\r\n      flatArr.push(b[Math.floor(i / 16)][i % 16]);\r\n    }\r\n    for (i = 0; i < flatArr.length; i = i + 3) {\r\n      b64 += chars[flatArr[i] >> 2];\r\n      b64 += chars[((flatArr[i] & 3) << 4) | (flatArr[i + 1] >> 4)];\r\n      if (flatArr[i + 1] !== undefined) {\r\n        b64 += chars[((flatArr[i + 1] & 15) << 2) | (flatArr[i + 2] >> 6)];\r\n      } else {\r\n        b64 += \"=\";\r\n      }\r\n      if (flatArr[i + 2] !== undefined) {\r\n        b64 += chars[flatArr[i + 2] & 63];\r\n      } else {\r\n        b64 += \"=\";\r\n      }\r\n    }\r\n    broken_b64 = b64.slice(0, 64) + \"\\n\";\r\n    for (i = 1; i < Math.ceil(b64.length / 64); i++) {\r\n      broken_b64 +=\r\n        b64.slice(i * 64, i * 64 + 64) +\r\n        (Math.ceil(b64.length / 64) === i + 1 ? \"\" : \"\\n\");\r\n    }\r\n    return broken_b64;\r\n  },\r\n  decode: function (string) {\r\n    string = string.replace(/\\n/g, \"\");\r\n    var _chars =\r\n      \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",\r\n      chars = _chars.split(\"\"),\r\n      flatArr = [],\r\n      c = [],\r\n      b = [],\r\n      i;\r\n    for (i = 0; i < string.length; i = i + 4) {\r\n      c[0] = _chars.indexOf(string.charAt(i));\r\n      c[1] = _chars.indexOf(string.charAt(i + 1));\r\n      c[2] = _chars.indexOf(string.charAt(i + 2));\r\n      c[3] = _chars.indexOf(string.charAt(i + 3));\r\n\r\n      b[0] = (c[0] << 2) | (c[1] >> 4);\r\n      b[1] = ((c[1] & 15) << 4) | (c[2] >> 2);\r\n      b[2] = ((c[2] & 3) << 6) | c[3];\r\n      flatArr.push(b[0], b[1], b[2]);\r\n    }\r\n    flatArr = flatArr.slice(0, flatArr.length - (flatArr.length % 16));\r\n    return flatArr;\r\n  }\r\n}\r\n\r\nexport { enc, dec };", "import { enc, dec } from \"./aes.ts\";\r\n\r\n// for some reason eslint was parsing the type inside of the function params as a variable\r\nexport interface Codec {\r\n    // eslint-disable-next-line\r\n    encode: (str: string | undefined) => string;\r\n    // eslint-disable-next-line\r\n    decode: (str: string | undefined) => string;\r\n}\r\n\r\nconst xor = {\r\n    encode: (str: string | undefined, key: number = 2) => {\r\n        if (!str) return str;\r\n\r\n        return encodeURIComponent(str.split(\"\").map((e, i) => i % key ? String.fromCharCode(e.charCodeAt(0) ^ key) : e).join(\"\"));\r\n    },\r\n    decode: (str: string | undefined, key: number = 2) => {\r\n        if (!str) return str;\r\n\r\n        return decodeURIComponent(str).split(\"\").map((e, i) => i % key ? String.fromCharCode(e.charCodeAt(0) ^ key) : e).join(\"\");\r\n    }\r\n}\r\n\r\nconst plain = {\r\n    encode: (str: string | undefined) => {\r\n        if (!str) return str;\r\n\r\n        return encodeURIComponent(str);\r\n    },\r\n    decode: (str: string | undefined) => {\r\n        if (!str) return str;\r\n\r\n        return decodeURIComponent(str);\r\n    }\r\n}\r\n\r\nconst aes = {\r\n    encode: (str: string | undefined) => {\r\n        if (!str) return str;\r\n\r\n        return encodeURIComponent(enc(str, \"dynamic\").substring(10));\r\n    },\r\n    decode: (str: string | undefined) => {\r\n        if (!str) return str;\r\n\r\n        return dec(\"U2FsdGVkX1\" + decodeURIComponent(str), \"dynamic\");\r\n    }\r\n}\r\n\r\nconst none = {\r\n    encode: (str: string | undefined) => str,\r\n    decode: (str: string | undefined) => str,\r\n}\r\n\r\nconst base64 = {\r\n    encode: (str: string | undefined) => {\r\n        if (!str) return str;\r\n\r\n        return decodeURIComponent(btoa(str));\r\n    },\r\n    decode: (str: string | undefined) => {\r\n        if (!str) return str;\r\n\r\n        return atob(str);\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface Window {\r\n        __scramjet$codecs: {\r\n            none: Codec;\r\n            plain: Codec;\r\n            base64: Codec;\r\n            xor: Codec;\r\n            aes: Codec;\r\n        }\r\n    }\r\n}\r\n\r\nself.__scramjet$codecs = {\r\n    none, plain, base64, xor, aes\r\n}"],
  "mappings": "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,IAAI,CAAC,GAAG,IAAI,IAAI,EAAE,CAAC;AACxC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,IAAI,EAAE,CAAC;AACvC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,IAAI,EAAE,CAAC;AACxC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,IAAI,EAAE,CAAC;AACzC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,IAAI,EAAE,CAAC;AACzC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,GAAG,IAAI,EAAE,CAAC;AACxC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,IAAI,EAAE,CAAC;AACzC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,IAAI,EAAE,CAAC;AACzC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,IAAI,EAAE,CAAC;AACzC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,IAAI,EAAE,CAAC;AACvC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,IAAI,EAAE,CAAC;AACvC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,IAAI,EAAE,CAAC;AACzC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,IAAI,EAAE,CAAC;AACxC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,IAAI,EAAE,CAAC;AACvC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,GAAG,IAAI,EAAE,CAAC;AACxC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,IAAI,EAAE,CAAC;AACzC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,IAAI,EAAE,CAAC;AACxC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,IAAI,EAAE,CAAC;AACvC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,GAAG,IAAI,EAAE,CAAC;AACxC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,IAAI,EAAE,CAAC;AACxC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,IAAI,EAAE,CAAC;AACxC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,GAAG,IAAI,EAAE,CAAC;AACxC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,IAAI,EAAE,CAAC;AACvC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,IAAI,EAAE,CAAC;AACxC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,IAAI,EAAE,CAAC;AACzC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,IAAI,EAAE,CAAC;AACvC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,IAAI,EAAE,CAAC;AACxC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,IAAI,EAAE,CAAC;AACzC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,IAAI,EAAE,CAAC;AACzC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,IAAI,EAAE,CAAC;AACvC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,IAAI,EAAE,CAAC;AACxC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,IAAI,EAAE,CAAC;AACxC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,IAAI,EAAE,CAAC;AACzC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,GAAG,IAAI,EAAE,CAAC;AACxC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,IAAI,EAAE,CAAC;AACxC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,IAAI,EAAE,CAAC;AACxC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,IAAI,EAAE,CAAC;AACxC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,IAAI,EAAE,CAAC;AACvC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,IAAI,EAAE,CAAC;AACzC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,IAAI,EAAE,CAAC;AACzC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,IAAI,EAAE,CAAC;AACxC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,IAAI,EAAE,CAAC;AACvC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,IAAI,EAAE,CAAC;AACxC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,IAAI,EAAE,CAAC;AACzC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,IAAI,EAAE,CAAC;AACxC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,GAAG,IAAI,EAAE,CAAC;AACxC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,IAAI,EAAE,CAAC;AACxC,UAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,IAAI,EA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",
  "names": ["x", "a", "b", "c", "d", "numArr"]
}
